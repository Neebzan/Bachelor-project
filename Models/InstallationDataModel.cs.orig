using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace Models
{
<<<<<<< HEAD
    public enum InstallationStatus { Unchecked, Verified, NotInstalled, UpdateRequired, NotFoundOnServer }
    public enum VersionBranch { None, Release, Beta, Development }
=======
    public enum InstallationStatus { Unchecked, Verified, NotInstalled, UpdateRequired, NotFoundOnServer, IsInstalling, IsDeleting}
>>>>>>> aea74b0f468e22e7f3574ebab012cd7799425601
    public class InstallationDataModel
    {
        public string VersionName { get; set; }
        public VersionBranch VersionBranch;
        public string InstallationChecksum { get; set; }
        public List<FileModel> Files { get; set; } = new List<FileModel>();
        public List<FileModel> MissingFiles { get; set; } = new List<FileModel>();
        public long TotalSize { get; set; }
        public long RemainingSize { get; set; }
        public InstallationStatus Status { get; set; }
        public string InstallPath { get; set; }

        [JsonIgnore]
        private Dictionary<string, string> FilesDictionary = null;
        public Dictionary<string, string> GetFilesAsDictionary()
        {
            if (FilesDictionary == null)
            {
                FilesDictionary = new Dictionary<string, string>();

                foreach (var item in Files)
                {
                    FilesDictionary.Add(item.FilePath, item.FileChecksum);
                }
            }

            return FilesDictionary;
        }

        public void SaveToFile()
        {
            File.WriteAllText(@InstallPath + @"\VersionInfo", JsonConvert.SerializeObject(this));
        }

        public bool LoadFromFile()
        {
            if (File.Exists(@InstallPath + @"\VersionInfo"))
            {
                var temp = JsonConvert.DeserializeObject<InstallationDataModel>(File.ReadAllText(@InstallPath + @"\VersionInfo"));
                this.Files = temp.Files;
                this.InstallationChecksum = temp.InstallationChecksum;
                this.MissingFiles = temp.MissingFiles;
                this.TotalSize = temp.TotalSize;
                this.RemainingSize = temp.RemainingSize;
                this.Status = temp.Status;
                this.VersionBranch = temp.VersionBranch;
                this.VersionName = temp.VersionName;

                return true;
            }
            return false;
        }

        public static InstallationDataModel GetModelFromFile(string pathToFolder)
        {
            if (File.Exists(@pathToFolder + @"\VersionInfo"))
            {
                return JsonConvert.DeserializeObject<InstallationDataModel>(File.ReadAllText(@pathToFolder + @"\VersionInfo"));
            }
            return null;
        }
    }

    public class FileModel
    {
        public string FileChecksum { get; set; }
        public string FilePath { get; set; }
        public long Size { get; set; }
    }
}
